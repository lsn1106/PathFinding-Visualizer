{"version":3,"sources":["PathfindingVisualizer/Node/Node.jsx","algorithms/dijkstra.js","PathfindingVisualizer/PathfindingVisualizer.jsx","App.js","reportWebVitals.js","index.js"],"names":["Node","this","props","col","isFinish","isStart","isWall","onMouseDown","onMouseEnter","onMouseUp","row","extraClassName","id","className","Component","dijkstra","grid","startNode","finishNode","visitedNodesInOrder","distance","unvisitedNodes","nodes","node","push","getAllNodes","length","sortNodesByDistance","closestNode","shift","Infinity","isVisited","updateUnvisitedNeighbors","sort","nodeA","nodeB","unvisitedNeighbors","neighbors","filter","neighbor","getUnvisitedNeighbors","previousNode","PathfindingVisualizer","state","mouseIsPressed","getInitialGrid","setState","newGrid","getNewGridWithWallToggled","nodesInShortestPathOrder","i","setTimeout","animateShortestPath","document","getElementById","currentNode","unshift","getNodesInShortestPathOrder","animateDijkstra","onClick","visualizeDijkstra","map","rowIdx","nodeIdx","handleMouseDown","handleMouseEnter","handleMouseUp","currentRow","createNode","slice","newNode","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.aab41267.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nimport './Node.css';\n\nexport default class Node extends Component {\n\trender() {\n\t\tconst {\n\t\t\tcol,\n\t\t\tisFinish,\n\t\t\tisStart,\n\t\t\tisWall,\n\t\t\tonMouseDown,\n\t\t\tonMouseEnter,\n\t\t\tonMouseUp,\n\t\t\trow,\n\t\t} = this.props;\n\t\tconst extraClassName = isFinish ? 'node-finish' : isStart ? 'node-start' : isWall ? 'node-wall' : '';\n\n\t\treturn (\n\t\t\t<div\n\t\t\t\tid={`node-${row}-${col}`}\n\t\t\t\tclassName={`node ${extraClassName}`}\n\t\t\t\tonMouseDown={() => onMouseDown(row, col)}\n\t\t\t\tonMouseEnter={() => onMouseEnter(row, col)}\n\t\t\t\tonMouseUp={() => onMouseUp()}></div>\n\t\t);\n\t}\n}","// Performs Dijkstra's algorithm; returns *all* nodes in the order\n// in which they were visited. Also makes nodes point back to their\n// previous node, effectively allowing us to compute the shortest path\n// by backtracking from the finish node.\nexport function dijkstra(grid, startNode, finishNode) {\n\tconst visitedNodesInOrder = [];\n\tstartNode.distance = 0;\n\tconst unvisitedNodes = getAllNodes(grid);\n\twhile (!!unvisitedNodes.length) {\n\t\tsortNodesByDistance(unvisitedNodes);\n\t\tconst closestNode = unvisitedNodes.shift();\n\t\t// If we encounter a wall, we skip it.\n\t\tif (closestNode.isWall) continue;\n\t\t// If the closest node is at a distance of infinity,\n\t\t// we must be trapped and should therefore stop.\n\t\tif (closestNode.distance === Infinity) return visitedNodesInOrder;\n\t\tclosestNode.isVisited = true;\n\t\tvisitedNodesInOrder.push(closestNode);\n\t\tif (closestNode === finishNode) return visitedNodesInOrder;\n\t\tupdateUnvisitedNeighbors(closestNode, grid);\n\t}\n}\n\nfunction sortNodesByDistance(unvisitedNodes) {\n\tunvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\n}\n\nfunction updateUnvisitedNeighbors(node, grid) {\n\tconst unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\n\tfor (const neighbor of unvisitedNeighbors) {\n\t\tneighbor.distance = node.distance + 1;\n\t\tneighbor.previousNode = node;\n\t}\n}\n\nfunction getUnvisitedNeighbors(node, grid) {\n\tconst neighbors = [];\n\tconst { col, row } = node;\n\tif (row > 0) neighbors.push(grid[row - 1][col]);\n\tif (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\n\tif (col > 0) neighbors.push(grid[row][col - 1]);\n\tif (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\n\treturn neighbors.filter(neighbor => !neighbor.isVisited);\n}\n\nfunction getAllNodes(grid) {\n\tconst nodes = [];\n\tfor (const row of grid) {\n\t\tfor (const node of row) {\n\t\t\tnodes.push(node);\n\t\t}\n\t}\n\treturn nodes;\n}\n\n// Backtracks from the finishNode to find the shortest path.\n// Only works when called *after* the dijkstra method above.\nexport function getNodesInShortestPathOrder(finishNode) {\n\tconst nodesInShortestPathOrder = [];\n\tlet currentNode = finishNode;\n\twhile (currentNode !== null) {\n\t\tnodesInShortestPathOrder.unshift(currentNode);\n\t\tcurrentNode = currentNode.previousNode;\n\t}\n\treturn nodesInShortestPathOrder;\n}","import React, { Component } from 'react';\nimport Node from './Node/Node';\nimport { dijkstra, getNodesInShortestPathOrder } from '../algorithms/dijkstra';\n\nimport './PathfindingVisualizer.css';\n\nconst START_NODE_ROW = 10;\nconst START_NODE_COL = 15;\nconst FINISH_NODE_ROW = 10;\nconst FINISH_NODE_COL = 35;\n\nexport default class PathfindingVisualizer extends Component {\n  constructor() {\n    super();\n    this.state = {\n      grid: [],\n      mouseIsPressed: false,\n    };\n  }\n\n  componentDidMount() {\n    const grid = getInitialGrid();\n    this.setState({ grid });\n  }\n\n  handleMouseDown(row, col) {\n    const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\n    this.setState({ grid: newGrid, mouseIsPressed: true });\n  }\n\n  handleMouseEnter(row, col) {\n    if (!this.state.mouseIsPressed) return;\n    const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\n    this.setState({ grid: newGrid });\n  }\n\n  handleMouseUp() {\n    this.setState({ mouseIsPressed: false });\n  }\n\n  animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder) {\n    for (let i = 0; i <= visitedNodesInOrder.length; i++) {\n      if (i === visitedNodesInOrder.length) {\n        setTimeout(() => {\n          this.animateShortestPath(nodesInShortestPathOrder);\n        }, 10 * i);\n        return;\n      }\n      setTimeout(() => {\n        const node = visitedNodesInOrder[i];\n        document.getElementById(`node-${node.row}-${node.col}`).className =\n          'node node-visited';\n      }, 10 * i);\n    }\n  }\n\n  animateShortestPath(nodesInShortestPathOrder) {\n    for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\n      setTimeout(() => {\n        const node = nodesInShortestPathOrder[i];\n        document.getElementById(`node-${node.row}-${node.col}`).className = 'node node-shortest-path';\n      }, 50 * i);\n    }\n  }\n\n  visualizeDijkstra() {\n    const { grid } = this.state;\n    const startNode = grid[START_NODE_ROW][START_NODE_COL];\n    const finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\n    const visitedNodesInOrder = dijkstra(grid, startNode, finishNode);\n    const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\n    this.animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder);\n  }\n\n  render() {\n    const { grid, mouseIsPressed } = this.state;\n\n    return (\n      <>\n        <button onClick={() => this.visualizeDijkstra()}>\n          Visualize Dijkstra's Algorithm\n        </button>\n        <div className=\"grid\">\n          {grid.map((row, rowIdx) => {\n            return (\n              <div key={rowIdx}>\n                {row.map((node, nodeIdx) => {\n                  const { row, col, isFinish, isStart, isWall } = node;\n                  return (\n                    <Node\n                      key={nodeIdx}\n                      col={col}\n                      isFinish={isFinish}\n                      isStart={isStart}\n                      isWall={isWall}\n                      mouseIsPressed={mouseIsPressed}\n                      onMouseDown={(row, col) => this.handleMouseDown(row, col)}\n                      onMouseEnter={(row, col) =>\n                        this.handleMouseEnter(row, col)\n                      }\n                      onMouseUp={() => this.handleMouseUp()}\n                      row={row}></Node>\n                  );\n                })}\n              </div>\n            );\n          })}\n        </div>\n      </>\n    );\n  }\n}\nconst getInitialGrid = () => {\n  const grid = [];\n  for (let row = 0; row < 20; row++) {\n    const currentRow = [];\n    for (let col = 0; col < 50; col++) {\n      currentRow.push(createNode(col, row));\n    }\n    grid.push(currentRow);\n  }\n  return grid;\n};\nconst createNode = (col, row) => {\n  return {\n    col,\n    row,\n    isStart: row === START_NODE_ROW && col === START_NODE_COL,\n    isFinish: row === FINISH_NODE_ROW && col === FINISH_NODE_COL,\n    distance: Infinity,\n    isVisited: false,\n    isWall: false,\n    previousNode: null,\n  };\n};\nconst getNewGridWithWallToggled = (grid, row, col) => {\n  const newGrid = grid.slice();\n  const node = newGrid[row][col];\n  const newNode = {\n    ...node,\n    isWall: !node.isWall,\n  };\n  newGrid[row][col] = newNode;\n  return newGrid;\n};","import React from 'react'\nimport './App.css';\nimport PathfindingVisualizer from './PathfindingVisualizer/PathfindingVisualizer'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <PathfindingVisualizer></PathfindingVisualizer>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}